set dotenv-load := true

export PIPENV_IGNORE_VIRTUALENVS := "1"
export PIPENV_VENV_IN_PROJECT := "1"

export REQUIREMENTS_CATEGORY := ""
export DOCKER_BUILD_ARGUMENTS := ""

# default lists actions
default:
  @just -f justfile --list

clean:
  rm -rf ./.venv || true
  rm Pipfile.lock || true

install:
  #!/usr/bin/env bash
  pipenv install --dev --python=$(pyenv which python) --verbose

lock:
  #!/usr/bin/env bash
  pipenv lock --verbose

requirements:
  #!/usr/bin/env bash
  echo "REQUIREMENTS_CATEGORY: '${REQUIREMENTS_CATEGORY}'"
  pipenv requirements --dev --categories "${REQUIREMENTS_CATEGORY}"

start:
  pipenv run start:test

build_image distro:
  echo "REQUIREMENTS_CATEGORY: '${REQUIREMENTS_CATEGORY}'"
  docker buildx build --progress=plain --load -f Dockerfile.{{ distro }} ${DOCKER_BUILD_ARGUMENTS} --build-arg "REQUIREMENTS_CATEGORY=${REQUIREMENTS_CATEGORY}" -t 45_pipenv_categories{{ distro }}:latest .

start_image distro: (build_image distro)
  docker run --gpus all 45_pipenv_categories{{ distro }}:latest

start_image_no_gpu distro: (build_image distro)
  docker run 45_pipenv_categories{{ distro }}:latest

dive distro: (build_image distro)
  dive 45_pipenv_categories{{ distro }}:latest

details distro: (build_image distro)
  @echo "******************************"
  @echo "** Labels"
  @echo "******************************"
  docker inspect -f '{{{{ .Config.Labels }}}}' 45_pipenv_categories{{ distro }}:latest
  @echo "******************************"
  @echo "** Dive CI"
  @echo "******************************"
  dive 45_pipenv_categories{{ distro }}:latest --ci || true
  @echo "******************************"
  @echo "** Size"
  @echo "******************************"
  container-diff analyze --json daemon://45_pipenv_categories{{ distro }}:latest | jq .

